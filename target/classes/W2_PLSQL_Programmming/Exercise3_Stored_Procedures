CREATE TABLE savings_accounts (
    account_id NUMBER PRIMARY KEY,
    customer_name VARCHAR2(50),
    balance NUMBER
);

INSERT INTO savings_accounts VALUES (101, 'Ramesh', 10000);
INSERT INTO savings_accounts VALUES (102, 'Suresh', 5000);
INSERT INTO savings_accounts VALUES (103, 'Mahesh', 8000);

CREATE TABLE employees (
    emp_id NUMBER PRIMARY KEY,
    emp_name VARCHAR2(50),
    department_id NUMBER,
    salary NUMBER
);

INSERT INTO employees VALUES (1, 'John', 10, 30000);
INSERT INTO employees VALUES (2, 'Alice', 20, 35000);
INSERT INTO employees VALUES (3, 'Bob', 10, 32000);

CREATE TABLE accounts (
    acc_id NUMBER PRIMARY KEY,
    cust_name VARCHAR2(50),
    balance NUMBER
);

INSERT INTO accounts VALUES (1001, 'Ravi', 12000);
INSERT INTO accounts VALUES (1002, 'Rohit', 8000);
INSERT INTO accounts VALUES (1003, 'Sita', 15000);

-- Scenario 1 : Write a stored procedure ProcessMonthlyInterest that calculates and updates the balance of all savings accounts by applying an interest rate of 1% to the current balance.
CREATE OR REPLACE PROCEDURE ProcessMonthlyInterest IS
BEGIN
    UPDATE savings_accounts
    SET balance = balance + (balance * 0.01);

    DBMS_OUTPUT.PUT_LINE('Monthly interest applied to all savings accounts.');
END;
/
BEGIN
    ProcessMonthlyInterest;
END;
/
SELECT * FROM savings_accounts;

-- Scenario 2 : Write a stored procedure UpdateEmployeeBonus that updates the salary of employees in a given department by adding a bonus percentage passed as a parameter.
CREATE OR REPLACE PROCEDURE UpdateEmployeeBonus (
    p_dept_id IN NUMBER,
    p_bonus_pct IN NUMBER
) IS
BEGIN
    UPDATE employees
    SET salary = salary + (salary * (p_bonus_pct / 100))
    WHERE department_id = p_dept_id;

    DBMS_OUTPUT.PUT_LINE('Bonus applied to Department ID: ' || p_dept_id);
END;
/
BEGIN
    UpdateEmployeeBonus(10, 10);  -- 10% bonus for Dept 10
END;
/
SELECT * FROM employees;

-- Scenario 3 : Write a stored procedure TransferFunds that transfers a specified amount from one account to another, checking that the source account has sufficient balance before making the transfer.
CREATE OR REPLACE PROCEDURE TransferFunds (
    p_from_acc IN NUMBER,
    p_to_acc IN NUMBER,
    p_amount IN NUMBER
) IS
    v_balance NUMBER;
BEGIN
    -- Check balance in source account
    SELECT balance INTO v_balance FROM accounts WHERE acc_id = p_from_acc;
    IF v_balance < p_amount THEN
        DBMS_OUTPUT.PUT_LINE('Insufficient balance in source account.');
    ELSE
        -- Deduct from source
        UPDATE accounts
        SET balance = balance - p_amount
        WHERE acc_id = p_from_acc;
        -- Add to destination
        UPDATE accounts
        SET balance = balance + p_amount
        WHERE acc_id = p_to_acc;
        DBMS_OUTPUT.PUT_LINE('Transfer of ' || p_amount || ' from ' || p_from_acc || ' to ' || p_to_acc || ' successful.');
    END IF;
END;
/
BEGIN
    TransferFunds(1001, 1002, 2000);
END;
/
SELECT * FROM accounts;
